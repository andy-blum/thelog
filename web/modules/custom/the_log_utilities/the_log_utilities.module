<?php

/**
 * @file
 * Primary module hooks for The LOG Utilities module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\the_log_utilities\ContractManager;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function the_log_utilities_preprocess_page(&$variables) {
}

/**
 * Implements hook_form_alter().
 */
function the_log_utilities_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['flag_confirm_form','unflag_confirm_form'])) {
    $flag = \Drupal::routeMatch()->getParameter('flag');
    $type = $flag->getFlaggableEntityTypeId();
    $id = \Drupal::routeMatch()->getParameter('entity_id');
    $node = \Drupal::entityTypeManager()->getStorage($type)->load($id);
    $form['entity_info'] = [
      '#markup' => '<p>' . $node->bundle() . ' - ' . $node->label() . '</p>'
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function the_log_utilities_form_node_contract_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $queries = \Drupal::request()->query->all();
  if (isset($queries['field_player'])) {
    $entity = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->load($queries['field_player']);

    $form['field_player']['widget'][0]['target_id']['#default_value'] = $entity;
  }
}

/**
 * Implements hook_entity_presave().
 */
function the_log_utilities_entity_presave(EntityInterface $entity) {
  $eid = $entity->getEntityTypeId();
  $bundle = $entity->bundle();
  $isNew = $entity->isNew();

  if ($eid == 'node' && $bundle == 'contract') {
    ContractManager::updateCapHit($entity->getOwner());
  }

  if ($eid == 'node' && $bundle == 'bid' && $isNew) {
    $entity->field_team->set(0, $entity->getOwner());
  }
}

/**
 * Implements hook_entity_delete().
 */
function the_log_utilities_entity_delete(EntityInterface $entity) {
  $eid = $entity->getEntityTypeId();
  $bundle = $entity->bundle();

  if ($eid == 'node' && $bundle == 'contract') {
    ContractManager::updateCapHit($entity->getOwner());
  }
}


/**
 * Implements hook_cron().
 */
function the_log_utilities_cron() {

  /**
   * Update cap values.
   */

  $ids = \Drupal::entityQuery('user')
	->condition('status', 1)
	->condition('roles', 'team_owner')
	->execute();

  foreach ($ids as $id) {
    $user = \Drupal::entityTypeManager()->getStorage('user')->load($id);
    ContractManager::updateCapHit($user);
  }

  /**
   * Publish bids after deadline.
   */

  // Get list of FA datetimes and current time
  $config_pages = \Drupal::service('config_pages.loader');
  $entity = $config_pages->load('fa_period_dates');
  $tz = new DateTimeZone('America/New_York');
  $now = (new DateTime('now', $tz))->format('U');

  // Flatten array & filter out future values.
  $raw_deadlines = $entity->get('field_fa_deadlines')->getValue();
  $fa_deadlines = [];
  foreach ($raw_deadlines as $deadline) {
    // Format all deadlines to EST timezone.
    $deadline_timestamp = (new DateTime($deadline['value'], $tz))->format('U');
    if ($deadline_timestamp < $now) {
      $fa_deadlines[] = $deadline_timestamp;
    }
  }

  // Sort so most recent timestamp is [0].
  rsort($fa_deadlines);

  // Get new bids, publish them, change owner to uid #1
  if (count($fa_deadlines) > 0) {
    // Get unpublished nodes created before most recent deadline.
    $query = \Drupal::entityQuery('node')
      ->condition('status', 0)
      ->condition('created', $fa_deadlines[0], '<')
      ->condition('type', 'bid');

    $nids = $query->execute();

    $user_1 = \Drupal::entityTypeManager()->getStorage('user')->load('1');

    // Publish & change ownership on all matching nodes.
    foreach ($nids as $nid) {
      $bid = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      $bid->setPublished();
      $bid->setOwner($user_1);
      $bid->save();
    }
  }

  // Get bids older than 1 week, delete them
  if (count($fa_deadlines) > 1) {
    $query = \Drupal::entityQuery('node')
      ->condition('created', $fa_deadlines[1], '<')
      ->condition('type', 'bid');

    $nids = $query->execute();

    foreach ($nids as $nid) {
      $bid = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      $bid->delete();
    }
  }
}
