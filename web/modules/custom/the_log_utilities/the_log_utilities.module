<?php

/**
 * @file
 * Primary module hooks for The LOG Utilities module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\the_log_utilities\ContractManager;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;


/**
 * Implements hook_preprocess_HOOK().
 */
function the_log_utilities_preprocess_page(&$variables) {
}

/**
 * Implements hook_form_alter().
 */
function the_log_utilities_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['flag_confirm_form', 'unflag_confirm_form'])) {
    $flag = \Drupal::routeMatch()->getParameter('flag');
    $type = $flag->getFlaggableEntityTypeId();
    $id = \Drupal::routeMatch()->getParameter('entity_id');
    $node = \Drupal::entityTypeManager()->getStorage($type)->load($id);
    $form['entity_info'] = [
      '#markup' => '<p>' . ucfirst($node->bundle()) . ' - ' . $node->label() . '</p>'
    ];

    if ($flag->id === 'promote') {
      $form['field_years'] = [
        '#title' => 'Contract Years',
        '#title_display' => 'before',
        '#description' => '',
        '#required' => true,
        '#type' => 'number',
        '#min' => 0,
        '#max' => 4,
      ];

      $form['contract_id'] = array(
        '#type' => 'hidden',
        '#value' => $id,
      );

      $form['actions']['submit']['#submit'][] = 'the_log_utilities_dts_promotion';
    }
  }
}

/**
 * Custom form submission functionality
 */
function the_log_utilities_dts_promotion(array $form, FormStateInterface $form_state) {

  $values = $form_state->getValues();
  $years = $values['field_years'];
  $contract = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->load($values['contract_id']);

  $contract->field_years_remaining->set(0, $years);
  $contract->field_status->set(0, 'active');
  $contract->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function the_log_utilities_form_node_contract_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $queries = \Drupal::request()->query->all();
  if (isset($queries['field_player'])) {
    $entity = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->load($queries['field_player']);

    $form['field_player']['widget'][0]['target_id']['#default_value'] = $entity;
  }
}

/**
 * Implements hook_entity_presave().
 */
function the_log_utilities_entity_presave(EntityInterface $entity) {
  $eid = $entity->getEntityTypeId();
  $bundle = $entity->bundle();
  $isNew = $entity->isNew();

  if ($eid == 'node' && $bundle == 'contract') {
    ContractManager::updateCapHit($entity->getOwner());
  }

  if ($eid == 'node' && $bundle == 'bid' && $isNew) {
    $entity->field_team->set(0, $entity->getOwner());
  }

  if ($eid == 'node' && $bundle == 'bid') {
    $salary = floatval($entity->field_bid_salary->first()->getValue()['value']);
    $isDTS = boolval($entity->field_bid_dts->first()->getValue()['value']);
    $effective_salary = $isDTS ? $salary / 10 : $salary;
    $entity->field_effective_salary->set(0, $effective_salary);
  }
}

/**
 * Implements hook_entity_update().
 */
function the_log_utilities_entity_update(EntityInterface $entity) {
  $eid = $entity->getEntityTypeId();
  $bundle = $entity->bundle();

  if ($eid == 'node' && $bundle == 'contract') {
    ContractManager::updateCapHit($entity->getOwner());
  }

  if ($eid == 'node' && $bundle == 'bid') {
    $salary = floatval($entity->field_bid_salary->first()->getValue()['value']);
    $isDTS = boolval($entity->field_bid_dts->first()->getValue()['value']);
    $effective_salary = $isDTS ? $salary / 10 : $salary;
    $entity->field_effective_salary->set(0, $effective_salary);
  }
}

/**
 * Implements hook_entity_delete().
 */
function the_log_utilities_entity_delete(EntityInterface $entity) {
  $eid = $entity->getEntityTypeId();
  $bundle = $entity->bundle();

  if ($eid == 'node' && $bundle == 'contract') {
    ContractManager::updateCapHit($entity->getOwner());
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function the_log_utilities_comment_insert(Drupal\comment\Entity\Comment $comment) {
  $comment_type = $comment->bundle();
  $node = $comment->getCommentedEntity();
  $parentComment = FALSE;
  if ($comment->hasParentComment()) {
    $parentComment = $comment->getParentComment();
  }

  $uids = \Drupal::entityQuery('user')
    ->execute();

  if ($comment_type == 'comment_forum') {
    $fid = $node->get('taxonomy_forums')->getString();
    $forum_name = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($fid)
      ->label();

    $to = [];

    foreach ($uids as $uid) {
      /**
       * @var \Drupal\user\Entity\User
       */
      $user = \Drupal::entityTypeManager()->getStorage('user')->load($uid);
      if ($user->hasRole('team_owner')) {
        $to[] = $user->getEmail();
      }
    }

    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'the_log_utilities';
    $key = 'forum_comment';
    $to = implode(', ', $to);
    $params['forum_node'] = $node;
    $params['forum_name'] = $forum_name;
    $params['comment'] = $comment;
    $langcode = 'en';
    $send = true;

    if ($forum_name == '') {
      # code...
    }

    $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);


    if ($result['result'] !== true) {
      $messenger = \Drupal::messenger();
      $messenger->addError('There was a problem sending email notifications about this comment. Please tell Andy and update the other league members on Discord.');
    }
  }
}

/**
 * Implements hook_mail().
 */
function the_log_utilities_mail($key, &$message, $params) {
  switch ($key) {
    case 'forum_comment':

      /**
       * @var \Drupal\node\Entity\Node
       */
      $forum = $params['forum_node'];

      /**
       * @var String
       */
      $forum_name = $params['forum_name'];

      /**
       * @var \Drupal\comment\Entity\Comment
       */
      $comment = $params['comment'];

      $date = new DateTime('now');

      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = "The LOG: New post in {$forum_name}";
      $message['body'][] = $comment
        ->get('comment_body')
        ->first()
        ->getValue()['value'];
      $message['body'][] = "<p><small>Posted by <a href=\"{$comment->getOwner()->toUrl()->toString()}\"> {$comment->getOwner()->getAccountName()}</a> at  {$date->format('M j, Y g:ia')}</small></p>";
      break;

    default;
      break;
  }
}

/**
 * Implements hook_cron().
 */
function the_log_utilities_cron() {

  /**
   * Publish bids after deadline & award winning contracts.
   */

  // Get list of FA datetimes and current time
  $config_pages = \Drupal::service('config_pages.loader');
  $entity = $config_pages->load('fa_period_dates');
  $tz = new DateTimeZone('America/New_York');
  $now = (new DateTime('now', $tz))->format('U');

  // Flatten array & filter out future values.
  $raw_deadlines = $entity->get('field_fa_deadlines')->getValue();
  $fa_deadlines = [];
  foreach ($raw_deadlines as $deadline) {
    // Format all deadlines to EST timezone.
    $deadline_timestamp = (new DateTime($deadline['value'], $tz))->format('U');
    if ($deadline_timestamp < $now) {
      $fa_deadlines[] = $deadline_timestamp;
    }
  }

  // Sort so most recent timestamp is [0].
  rsort($fa_deadlines);

  // Get new bids, publish them, change owner to uid #1
  if (count($fa_deadlines) > 0) {
    // Get unpublished nodes created before most recent deadline.
    $query = \Drupal::entityQuery('node')
      ->condition('status', 0)
      ->condition('created', $fa_deadlines[0], '<')
      ->condition('type', 'bid');

    $nids = $query->execute();
    $user_1 = \Drupal::entityTypeManager()->getStorage('user')->load('1');
    $grouped_bids = [];

    // Group competing bids for sorting.
    // Publish & change ownership on all matching nodes.
    foreach ($nids as $nid) {
      /**
       * @var \Drupal\Core\Entity\Node $node
       */
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);

      $player_id = $node->get('field_player')->getValue()[0]['target_id'];

      $bid = (object) [
        'player' => $player_id,
        'team' => $node->getOwnerId(),
        'years' => intval($node->get('field_bid_years')->getValue()[0]['value']),
        'owner_rank' => intval($node->getOwner()->get('field_rank')->getValue()[0]['value']),
        'effective' => floatval($node->get('field_effective_salary')->getValue()[0]['value']),
        'salary' => intval($node->get('field_bid_salary')->getValue()[0]['value'])
      ];

      $grouped_bids[$player_id][] = $bid;

      $node->setPublished();
      $node->setOwner($user_1);
      $node->save();
    }
  }

  // Sort groups, award contract to winning bid
  foreach ($grouped_bids as $group) {
    if (count($group) > 1) {
      $bid_priority = array(
        function ($a, $b) {
          return $b->effective <=> $a->effective;
        },
        function ($a, $b) {
          return $b->years <=> $a->years;
        },
        function ($a, $b) {
          return $b->owner_rank <=> $a->owner_rank;
        },
      );

      usort($group, function ($a, $b) use ($bid_priority) {
        foreach ($bid_priority as $cmpFn) {
          $diff = call_user_func($cmpFn, $a, $b);
          if ($diff !== 0) {
            return $diff;
          }
        }
        return 0;
      });
    }

    $winner = $group[0];
    $player = \Drupal::entityTypeManager()->getStorage('node')->load($winner->player);
    $team = \Drupal::entityTypeManager()->getStorage('user')->load($winner->team);

    $contract = Node::create([
      'type' => 'contract',
    ]);

    $contract->set('field_player', $player);
    $contract->set('field_salary', $winner->salary);
    $contract->set('field_years_remaining', $winner->years);
    $contract->set('field_status', $winner->is_dts ? 'dts' : 'active');
    $contract->setOwner($team);

    $contract->save();
  }

  // Get bids older than 1 week, delete them
  if (count($fa_deadlines) > 1) {
    $query = \Drupal::entityQuery('node')
      ->condition('created', $fa_deadlines[1], '<')
      ->condition('type', 'bid');

    $nids = $query->execute();

    foreach ($nids as $nid) {
      $bid = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
      $bid->delete();
    }
  }

  /**
   * Update cap values.
   */

  $ids = \Drupal::entityQuery('user')
    ->condition('status', 1)
    ->condition('roles', 'team_owner')
    ->execute();

  foreach ($ids as $id) {
    $user = \Drupal::entityTypeManager()->getStorage('user')->load($id);
    ContractManager::updateCapHit($user);
  }
}
